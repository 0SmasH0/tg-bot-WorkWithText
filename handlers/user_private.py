from aiogram import types, Router, F, Bot
from aiogram.filters import CommandStart, Command, or_f, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.utils.formatting import as_list, as_marked_section, Bold, Italic

from filters.chat_types import ChatTypeFilter
from keyboards import reply


import os
from dotenv import find_dotenv, load_dotenv

from my_func import check_text, decor_text_for_word

load_dotenv(find_dotenv())

user_private_router = Router()
user_private_router.message.filter(ChatTypeFilter(['private']))


@user_private_router.message(
    or_f(CommandStart(), (F.text.lower().contains('–≤ –Ω–∞—á–∞–ª–æ') | (F.text.lower().contains('–Ω–µ—Ç')))))
async def start_cmd(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state:
        await state.clear()
    await message.answer(os.getenv('START_WORDS'), reply_markup=reply.start_kb)


@user_private_router.message(or_f(Command('donate'), (F.text.lower().contains('–ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∞–≤—Ç–æ—Ä–æ–≤'))))
async def donate_cmd(message: types.Message):
    text = as_list(
        as_marked_section(
            Bold('–°–ø–æ—Å–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏:'),
            Italic("BelinvestBank: ") + " 234324234324",
            marker='‚úÖ',
        ),
        as_marked_section(
            Bold("–í –ø—Ä–æ—Ü–µ—Å—Å–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:"),
            Italic("QIWI –ö–æ—à–µ–ª–µ–∫"),
            Italic("–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞"),
            marker='‚ùé'
        ),
        sep='\n-----------------------\n'
    )
    await message.answer(text.as_html(), reply_markup=reply.back_to_start)


@user_private_router.message(Command('about'))
async def about_cmd(message: types.Message):
    await message.answer('–û –Ω–∞—Å:', reply_markup=reply.back_to_start)


@user_private_router.message(Command('secret'))
async def secret_cmd(message: types.Message):
    await message.answer('–¢—ã —Å–¥–µ–ª–∞–ª –¥–æ–º–∞—à–∫—É –æ—Ç –¢–∞–π–ª–µ—Ä–∞?', reply_markup=reply.back_to_start)


# –ö–æ–¥ –Ω–∏–∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ –ø–æ –∫–Ω–æ–ø–∫–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—é"

class AddTextOrDocument(StatesGroup):
    text = State()


@user_private_router.message(StateFilter(None),
                             F.text.lower().contains("–ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—é") | F.text.lower().contains("–¥–∞"))
async def spelling_cmd(message: types.Message, state: FSMContext):
    await message.answer('–í—Å—Ç–∞–≤—Ç–µ –≤ —á–∞—Ç –Ω—É–∂–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—Ç—å–µ Word —Ñ–∞–π–ªüòä', reply_markup=reply.back_to_start)
    await state.set_state(AddTextOrDocument.text)


@user_private_router.message(AddTextOrDocument.text, F.text | F.document)
async def spelling_2_cmd(message: types.Message, bot: Bot, state: FSMContext):
    await state.update_data(text=message.text)
    data = await state.get_data()

    if data['text'] is None:
        await state.update_data(text=message.document)
        data = await state.get_data()

    if isinstance(data['text'], str):
        res = check_text(data['text'])
        if isinstance(res, str):
            await message.answer(res)
        else:
            await message.answer(f"–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫c—Ç:\n\n{res[0]}")
            await message.answer(f"–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:\n\n{res[1]}")
    else:
        file_id = message.document.file_id
        file = await bot.get_file(file_id)
        file_path = file.file_path
        await bot.download_file(file_path, "text.doc")   # TODO
        await message.answer('–í –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏')
    await state.clear()
    await message.answer('–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?', reply_markup=reply.yes_or_no)


# –ö–æ–¥ –Ω–∏–∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ –ø–æ –∫–Ω–æ–ø–∫–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ä—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ"
class AddTextOrDocumentForDecor(StatesGroup):
    text = State()
    text_size = State()
    font = State()

    texts = {
        'AddTextOrDocumentForDecor:text': '–í–≤–µ–¥–∏—Ç–µ –≤ —á–∞—Ç –Ω—É–∂–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–ª–∏ Word —Ñ–∞–π–ª –∑–∞–Ω–æ–≤–æ:',
        'AddTextOrDocumentForDecor:text_size': '–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞ –∑–∞–Ω–æ–≤–æ:',
        'AddTextOrDocumentForDecor:font': '–í–≤–µ–¥–∏—Ç–µ –Ω—É–∂–Ω—ã–π —à—Ä–∏—Ñ—Ç –∑–∞–Ω–æ–≤–æ:',
    }

@user_private_router.message(F.text.lower().contains("–ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ"))
async def decor_cmd(message: types.Message, state: FSMContext):
    await message.answer('–í—Å—Ç–∞–≤—Ç–µ –≤ —á–∞—Ç –Ω—É–∂–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—Ç—å–µ Word —Ñ–∞–π–ªüòä', reply_markup=reply.back_to_start)
    await state.set_state(AddTextOrDocumentForDecor.text)


#–í–µ—Ä–Ω—É—Ç—Å—è –Ω–∞ —à–∞–≥ –Ω–∞–∑–∞–¥ (–Ω–∞ –ø—Ä–æ—à–ª–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ)
@user_private_router.message(StateFilter('*'), F.text.lower().contains("–≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥"))
async def back_step_handler(message: types.Message, state: FSMContext) -> None:

    current_state = await state.get_state()

    if current_state is None:
        return await state.set_state(AddTextOrDocumentForDecor.text)

    previous = None
    for step in AddTextOrDocumentForDecor.__all_states__:
        if step.state == current_state:
            await state.set_state(previous)
            if previous is None:
                return await state.set_state(AddTextOrDocumentForDecor.text)
            await message.answer(f"–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –ø—Ä–æ—à–ª–æ–º—É —à–∞–≥—É \n\n<b>{AddTextOrDocumentForDecor.texts[previous.state]}</b>")
            return
        previous = step


@user_private_router.message(AddTextOrDocumentForDecor.text, F.text | F.document)
async def decor_2_cmd(message: types.Message, state: FSMContext):
    await message.answer('–ö–∞–∫–æ–π —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞ –≤–∞–º –Ω—É–∂–µ–Ω?üòä', reply_markup=reply.back_to_start_and_back)
    await state.update_data(text=message.text)
    data_0 = await state.get_data()
    if data_0['text'] is None:
        await state.update_data(text=message.document)
        document = message.document
        print(document)
    await state.set_state(AddTextOrDocumentForDecor.text_size)


@user_private_router.message(AddTextOrDocumentForDecor.text_size, F.text)
async def decor_3_cmd(message: types.Message, state: FSMContext):
    await message.answer('–ö–∞–∫–æ–π —à—Ä–∏—Ñ—Ç –≤–∞–º –Ω—É–∂–µ–Ω?üòä', reply_markup=reply.back_to_start_and_back)
    await state.update_data(text_size=message.text)
    await state.set_state(AddTextOrDocumentForDecor.font)


@user_private_router.message(AddTextOrDocumentForDecor.font, F.text)
async def decor_4_cmd(message: types.Message, state: FSMContext):
    await state.update_data(font=message.text)
    data = await state.get_data()
    print(data)
    if isinstance(data['text'], str):
        decor_text_for_word(data['text'], int(data['text_size']), data['font'])
        file_path = r'/Users/mrkot/Desktop/telegram-bot/example.docx'
        await message.answer_document(document=types.FSInputFile(path=file_path, filename='example'))
        os.remove(path=file_path)
    else:
        await message.answer('–í –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏')
    await state.clear()
    await message.answer('–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?', reply_markup=reply.yes_or_no)


@user_private_router.edited_message(F.text)
async def edit_cmd(message: types.Message):
    await message.answer('–≠—Ç–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!')


@user_private_router.message()
async def cmd(message: types.Message):
    await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—É–Ω–∫—Ç –º–µ–Ω—é.')
